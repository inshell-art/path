#!/usr/bin/env bash
[ -n "${BASH_VERSION:-}" ] || exec /usr/bin/env bash "$0" "$@"

# Idempotent enough: build -> declare -> write output files
set -euo pipefail
cd -- "$(dirname -- "$0")/.."

# ---- env & deps ----
[ -f scripts/.env.local ] && . scripts/.env.local
[ -f scripts/.env.example ] && . scripts/.env.example

need() { command -v "$1" >/dev/null 2>&1 || {
	echo "Missing dependency: $1" >&2
	exit 1
}; }
need scarb
need sncast
need jq
need tee
need curl

RPC="${RPC_URL:-http://127.0.0.1:5050/rpc}"
PROFILE="${PROFILE:-dev_deployer}"

OUT_DIR="output"
mkdir -p "$OUT_DIR"
: >"$OUT_DIR/.gitkeep"
CLASSES_FILE="$OUT_DIR/classes.devnet.json"
ENV_FILE="$OUT_DIR/classes.env"

json_put() {
	# json_put key value -> writes to $CLASSES_FILE
	local key="$1" val="$2" tmp
	tmp="$(mktemp)"
	if [ -f "$CLASSES_FILE" ]; then
		jq -S --arg k "$key" --arg v "$val" '.[$k]=$v' "$CLASSES_FILE" >"$tmp"
	else
		jq -S -n --arg k "$key" --arg v "$val" '{($k):$v}' >"$tmp"
	fi
	mv "$tmp" "$CLASSES_FILE"
}

# declare_pkg <ENV_VAR> <package> <ContractName>
declare_pkg() {
	local envvar="$1" pkg="$2" cname="$3"
	local ts out ch
	echo "==> Declare ${pkg}::${cname}"
	ts="$(date +%F-%H%M%S)"
	out="$OUT_DIR/declare_${cname}_${ts}.json"

	# Stream style: sncast -> tee (save raw) -> jq picks last non-empty class_hash
	ch="$(
		sncast --profile "$PROFILE" --json declare \
			--package "$pkg" --contract-name "$cname" |
			tee "$out" |
			jq -r '.class_hash // .declare.class_hash // empty' |
			tail -n1
	)"

	[ -n "$ch" ] || {
		echo "!! No class_hash parsed for ${pkg}::${cname}" >&2
		exit 1
	}

	# export ENV var and update ledger keyed by package
	printf -v "$envvar" '%s' "$ch"
	export "$envvar"
	json_put "$pkg" "$ch"
	printf "%s=%s\n" "$envvar" "$ch"
	echo "Class hash written to $out as $ch for ${pkg}::${cname}"
}

echo "==> Building workspace"
scarb build >/dev/null

# ---- explicit declarations (stream-based) ----
declare_pkg CLASS_NFT path_nft PathNFT
declare_pkg CLASS_MINTER path_minter PathMinter
declare_pkg CLASS_ADAPTER path_minter_adapter PathMinterAdapter
declare_pkg CLASS_PULSE pulse_auction PulseAuction

# ---- write a sourceable env file for later shells ----
cat >"$ENV_FILE" <<EOF
# generated by scripts/declare-devnet.sh
export CLASS_NFT=${CLASS_NFT}
export CLASS_MINTER=${CLASS_MINTER}
export CLASS_ADAPTER=${CLASS_ADAPTER}
export CLASS_PULSE=${CLASS_PULSE}
export RPC_URL=${RPC}
export PROFILE=${PROFILE}
EOF

echo
echo "Declared class hashes ledger → $CLASSES_FILE"
jq -S '.' "$CLASSES_FILE" || true
echo "Env exports → $ENV_FILE"
echo 'Load into your current shell with:  source output/classes.env'
